## handlers
## To notify multiple handlers from one task, use a list for the notify option:
## To have one handler notify another, add a notify option onto the handler—handlers are basically
## glorified tasks that can be called by the notify option, but since they act as tasks themselves, they
## can chain themselves to other handlers
## you use the command line flag --force-handlers when running your playbook
- name: Rebuild application configuration.
  command: /opt/app/rebuild.sh
  notify:
  - restart apache
  - restart memcached

  ### Environment variables
## First of all, if you need
## to set some environment variables for your remote user account, you can do that by adding lines to
## the remote user’s .bash_profile, like so:
- name: Add an environment variable to the remote user's shell.
  lineinfile: dest=~/.bash_profile regexp=^ENV_VAR= line=ENV_VAR=value
## To use an environment variable in further tasks, it’s recommended you use a task’s register option to store
## the environment variable in a variable Ansible can use later

- name: Add an environment variable to the remote user's shell.
  lineinfile: dest=~/.bash_profile regexp=^ENV_VAR= line=ENV_VAR=value

## We use source ∼/.bash_profile because Ansible needs to make sure it’s using the latest
## environment configuration for the remote user
- name: Get the value of the environment variable we just added.
  shell: 'source ~/.bash_profile && echo $ENV_VAR'
  register: foo

- name: Print the value of the environment variable.
  debug: msg="The variable is {{ foo.stdout }}"
## Linux will also read global environment variables added to /etc/environment, so you can add your
## variable there:
- name: Add a global environment variable.
  lineinfile: dest=/etc/environment regexp=^ENV_VAR= line=ENV_VAR=value
  sudo: yes

### Per-play environment variables

- name: Download a file, using example-proxy as a proxy.
  get_url: url=http://www.example.com/file.tar.gz dest=~/Downloads/
  environment:
    http_proxy: http://example-proxy:80/


vars:
  var_proxy:
    http_proxy: http://example-proxy:80/
    https_proxy: https://example-proxy:443/
    [etc...]
tasks:
- name: Download a file, using example-proxy as a proxy.
  get_url: url=http://www.example.com/file.tar.gz dest=~/Downloads/
  environment: var_proxy

## If a proxy needs to be set system-wide (as is the case behind many corporate firewalls), I like to do
## so using the global /etc/environment file
## In the 'vars' section of the playbook (set to 'absent' to disable proxy):

proxy_state: present

# In the 'tasks' section of the playbook:
- name: Configure the proxy.
  lineinfile:
    dest: /etc/environment
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ proxy_state }}"
  with_items:
    - { regexp: "^http_proxy=", line: "http_proxy=http://example-proxy:80/" }
    - { regexp: "^https_proxy=", line: "https_proxy=https://example-proxy:443/" }
    - { regexp: "^ftp_proxy=", line: "ftp_proxy=http://example-proxy:80/" }

## Doing it this way allows me to configure whether the proxy is enabled per-server (using the proxy_-
## state variable), and with one play, set the http, https, and ftp proxies
## You can test remote environment variables using the ansible command: ansible test -m
## shell -a 'echo $TEST'

### Variables

## inventory file foo=bar

## in playbook or variable include file foo: bar

### playbook variables
## Variables can be passed in via the command line, when calling ansible-playbook, with the --extravars
## option:
$ ansible-playbook example.yml --extra-vars "foo=bar"


## Variables may be included inline with the rest of a playbook, in a vars section
---
- hosts: example
  vars:
    foo: bar
  tasks:
    # Prints "Variable 'foo' is set to bar".
    - debug: msg="Variable 'foo' is set to {{ foo }}"


## Variables may also be included in a separate file, using the vars_files section:
---
# Main playbook file.
- hosts: example
  vars_files:
    - vars.yml
  tasks:
    - debug: msg="Variable 'foo' is set to {{ foo }}"

 ---
 # Variables file 'vars.yml' in the same folder as the playbook.
 foo: bar

## Notice how the variables are all at the root level of the YAML file. They don’t need to be under any
## kind of vars heading when they are included as a standalone file

## you could use a conditional vars_files include:
---
- hosts: example
  vars_files:
    - [ "apache_{{ ansible_os_family }}.yml", "apache_default.yml" ]
  tasks:
    - service: name={{ apache }} state=running
## Then, add two files in the same folder as your example playbook, apache_CentOS.yml, and apache_-
## default.yml. Define the variable apache: httpd in the CentOS file, and apache: apache2 in the
## default file

###Inventory variables
## Variables may also be added via Ansible inventory files, either inline with a host definition, or after
## a group:
# Host-specific variables (defined inline).
[washington]
app1.example.com proxy_state=present
app2.example.com proxy_state=absent

# Variables defined for the entire group.
[washington:vars]
cdn_host=washington.static.example.com
api_version=3.0.1

### Registered Variables
## There are many times that you will want to run a command, then use its return code, stderr, or stdout
## to determine whether to run a later task. For these situations, Ansible allows you to use register
## to store the output of a particular command in a variable at runtime

- name: "Node: Check list of Node.js apps running."
  command: forever list
  register: forever_list
  changed_when: false

- name: "Node: Start example Node.js app."
  command: forever start {{ node_apps_location }}/app/app.js
  when: "forever_list.stdout.find('{{ node_apps_location}}/app/app.js') == -1"

### Accessing Variables
## When the command is run, Ansible will substitute the contents of my_environment for {{ my_-
## environment }}. So the resulting command would be something like /opt/my-app/rebuild dev

- command: /opt/my-app/rebuild {{ my_environment }}

### Host and Group variables
[group]
host1
host2
## The simplest way to define variables on a per-host or per-group basis is to do so directly within the
## inventory file

### group_vars and host_vars
## Ansible will search within the same directory as your inventory file (or inside /etc/ansible if you’re
## using the default inventory file at /etc/ansible/hosts) for two specific directories: group_vars and
## host_vars.
## You can place YAML files inside these directories named after the group name or hostname defined
## in your inventory file
---
# File: /etc/ansible/group_vars/group
admin_user: john
---
# File: /etc/ansible/host_vars/host1
admin_user: jane

### Magic variables with host and group variables and information
# From any host, returns "jane".
{{ hostvars['host1']['admin_user'] }}

## Facts (Variables derived from system information)
## Facts can be extremely helpful when you’re running playbooks; you can use gathered information
## like host IP addresses, CPU type, disk space, operating system information, and network interface
## information to change when certain tasks are run, or to change certain information used in
## configuration files.
## To get a list of every gathered fact available, you can use the ansible command with the setup
## module

$ ansible munin -m setup

## If you don’t need to use facts you can set gather_facts: no in your playbook
- hosts: db
gather_facts: no

### Local Facts (Facts.d)
## Another way of defining host-specific facts is to place .fact file in a special directory on remote
## hosts, /etc/ansible/facts.d/

[users]
admin=jane,john
normal=jim

### Variable Precedence

## Variables from the command line (-e in the command line) always win.

### If/then/when - Conditionals
### Jinja2 Expressions, Python built-ins, and Logic
##  Ansible uses expressions and built-ins with when,
## changed_when, and failed_when so you can describe these things to Ansible with as much precision
## as possible.

## As an example, I need to parse version strings from time to time, to find the major version of a
## particular project. Assuming the variable software_version is set to 4.6.1, I can get the major
## version by splitting the string on the . character, then using the first element of the array. I can
## check if the major version is 4 using when, and choose to run (or not run) a certain task:
- name: Do something only for version 4 of the software.
[task here]
when: software_version.split('.')[0] == '4'

### register
## In Ansible, any play can ‘register’ a variable, and once registered, that variable will be available to
## all subsequent tasks
- shell: my_command_here
register: my_command_result
## Later, you can access stdout (as a string) with my_command_result.stdout, and stderr with my_-
## command_result.stderr
## a particular registered variable, you can run
## a playbook with -v to inspect play output

### when
- yum: name=mysql-server state=present
when: is_db_server
## The above statement assumes you’ve defined the is_db_server variable as a boolean (true or false)
## earlier, and will run the play if the value is true, or skip the play when the value is false

## As an example, we want to check the status of a running application, and run a play only when that
## application reports it is ‘ready’ in its output:

- command: my-app --status
register: myapp_result
- command: do-something-to-my-app
when: "'ready' in myapp_result.stdout"

## Here are some examples of uses of when in real-world playbooks:
# From our Node.js playbook - register a command's output, then see
# if the path to our app is in the output. Start the app if it's
# not present.
- command: forever list
register: forever_list
- command: forever start /path/to/app/app.js
when: "forever_list.stdout.find('/path/to/app/app.js') == -1"
# Run 'ping-hosts.sh' script if 'ping_hosts' variable is true.
- command: /usr/local/bin/ping-hosts.sh
when: ping_hosts
# Run 'git-cleanup.sh' script if a branch we're interested in is
# missing from git's list of branches in our project.
- command: chdir=/path/to/project git branch
register: git_branches
- command: /path/to/project/scripts/git-cleanup.sh
when: "(is_app_server == true) and ('interesting-branch' not in \
git_branches.stdout)"
# Downgrade PHP version if the current version contains '7.0'.
- shell: php --version
register: php_version
- shell: yum -y downgrade php*
when: "'7.0' in php_version.stdout"
# Copy a file to the remote server if the hosts file doesn't exist.
- stat: path=/etc/hosts
register: hosts_file
- copy: src=path/to/local/file dest=/path/to/remote/file
when: hosts_file.stat.exists == false

### changed_when and failed_when

## so if you use the command or shell module without also using changed_when, Ansible will always report a change.
## Most Ansible modules report whether they resulted in changes correctly, but you can also override
## this behavior by invoking changed_when yourself

## You can see we used register to store the results of the command, then we checked whether a
## certain string was in the registered variable’s stdout. Only when Composer doesn’t do anything will
## it print “Nothing to install or update”, so we use that string to tell Ansible if the task resulted in a
## change.
- name: Install dependencies via Composer.
  command: "/usr/local/bin/composer global require phpunit/phpunit --prefer-dist"
  register: composer
  changed_when: "'Nothing to install or update' not in composer.stdout"

### ignore_errors
## you can add ignore_errors to the task, and Ansible will remain blissfully
## unaware of any problems running a particular task

### Delegation, Local Actions, and Pauses

## Ansible allows any task to be delegated to a particular host using delegate_to
- name: Add server to Munin monitoring configuration.
  command: monitor-server webservers {{ inventory_hostname }}
  delegate_to: "{{ monitoring_master }}"

- name: Remove server from load balancer.
  command: remove-from-lb {{ inventory_hostname }}
  delegate_to: 127.0.0.1
## If you’re delegating a task to localhost, Ansible has a convenient shorthand you can use, local_-
## action, instead of adding the entire delegate_to line:
- name: Remove server from load balancer.
  local_action: command remove-from-lb {{ inventory_hostname }}

### Pausing playbook execution with wait_for
## You might also use local_action in the middle of a playbook to wait for a freshly-booted server or
## application to start listening on a particular port

- name: Wait for webserver to start.
  local_action:
    module: wait_for
    host: "{{ inventory_hostname }}"
    port: "{{ webserver_port }}"
    delay: 10
    timeout: 300
    state: started
## The above task waits until webserver_port is open on inventory_hostname, as checked from the
## host running the Ansible playbook, with a 5-minute timeout (and 10 seconds before the first check,
## and between checks).
## wait_for can be used to pause your playbook execution to wait for many different things

### Running an entire playbook locally
## when a playbook should be otherwise run on the same host as the ansibleplaybook
## command is run, you can use --connection=local to speed up playbook execution by
## avoiding the SSH connection overhead

---
- hosts: 127.0.0.1
  gather_facts: no

tasks:
- name: Check the current system date.
  command: date
  register: date

- name: Print the current system date.
  debug: var=date.stdout

### Prompts
## As a simple example, you can request a user to enter a username and password that could be used
## to login to a network share

---
- hosts: all

  vars_prompt:
    - name: share_user
      prompt: "What is your network username?"

    - name: share_pass
      prompt: "What is your network password?"
      private: yes

### Tags allow you to run (or exclude) subsets of a playbook’s tasks.
## You can tag roles, included files, individual tasks, and even entire plays


---
# You can apply tags to an entire play.
- hosts: webservers
  tags: deploy

  roles:
    # Tags applied to a role will be applied to the tasks in the role.
    - { role: tomcat, tags: ['tomcat', 'app'] }

tasks:
  - name: Notify on completion.
    local_action:
      module: osx_say
      msg: "{{inventory_hostname}} is finished!"
      voice: Zarvox
   tags:
     - notifications
     - say

  - include: foo.yml
    tags: foo

$ ansible-playbook tags.yml --tags "tomcat,say"
$ ansible-playbook tags.yml --skip-tags "notifications"
