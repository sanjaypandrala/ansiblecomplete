### power plays

## shell script

# install apache
$ yum install --quiet -y httpd httpd-devel

# Copy configuration files.
$ cp /path/to/config/httpd.conf /etc/httpd/conf/httpd.conf
$ cp /path/to/config/httpd-vhosts.conf /etc/httpd/conf/httpd-vhosts.conf
# Start Apache and configure it to run at boot.
$ service httpd start
$ chkconfig httpd on
# (from the same directory in which the shell script resides)
$ ./shell-script.sh

### ansible playbook with the name playbook.yml
### usage ansible-playbook playbook.yml

---
- hosts: all
  tasks:
  - name: install Apache
    command: yum install --quiet -y httpd httpd-devel
  - name: copy configuration files
    command: >
      cp /path/to/config/httpd.conf /etc/httpd/conf/httpd.conf
  - command: >
      cp /path/to/config/httpd-vhosts.conf /etc/httpd/conf/httpd-vhosts.conf
  - name: Start Apache and configure it to run at boot
    command: service httpd Start
  - command: chkconfig httpd on

   ### revised ansible playbook

   ---
   - hosts: all
     sudo: yes
     tasks:
     - name: install Apache
       yum: name={{ item }} state=present
       with_items:
       - httpd
       - httpd-devel
     - name: Copy configuration files.
       copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: 0644
       with_items:
       - {
          src: "/path/to/config/httpd.conf"
          dest: "/etc/httpd/conf/httpd.conf"
       }

       - {
          src: "/path/to/config/httpd-vhosts.conf"
          dest: "/etc/httpd/conf/httpd-vhosts.conf"

        }
      - name: make sure apache is started and configure it to run at boot
        service: name=httpd state=started enabled=yes

### use --check option with playbook to run without actually running the task on the server

### running playbooks with ansible-playbook
## limiting playbooks to particular hosts and groups
'''
The value can be set to all hosts, a group of hosts defined in your inventory, multiple groups of hosts
(e.g. webservers,dbservers), individual hosts (e.g. atl.example.com), or a mixture of hosts. You can
even do wildcard matches, like *.example.com, to match all subdomains of a top-level domain
'''

### to limit run on group of servers
$ ansible-playbook playbook.yml --limit webservers

### to limit run on single machine
$ ansible-playbook playbook.yml --limit xyz.example.com

### to see list of hosts that would be affected before you actually run it
## use --list-hosts
$ ansible-playbook playbook.yml --list-hosts

## setting user and sudo options with ansible-playbook
$ ansible-playbook playbook.yml --remote-user=naga
$ ansible-playbook playbook.yml --sudo-user=naga --ask-sudo-pass

'''
## other options for ansible-playbook
--inventory=PATH (-i PATH): Define a custom inventory file (default is the default Ansible
inventory file, usually located at /etc/ansible/hosts).
--verbose (-v): Verbose mode (show all output, including output from successful options).
You can pass in -vvvv to give every minute detail.
--extra-vars=VARS (-e VARS): Define variables to be used in the playbook, in "key=value,key=value"
format.
--forks=NUM (-f NUM): Number for forks (integer). Set this to a number higher than 5 to
increase the number of servers on which Ansible will run tasks concurrently.
--connection=TYPE (-c TYPE): The type of connection which will be used (this defaults to
ssh; you might sometimes want to use local to run a playbook on your local machine, or on
a remote server via cron).
--check: Run the playbook in Check Mode (‘Dry Run’); all tasks defined in the playbook will
be checked against all hosts, but none will actually be run.
'''

### Real world playbook : centos node.js app server
## usage ansible-playbook playbook.yml --extra-vars="node_apps_location=/usr/local/opt/node"
---
- hosts: all
  tasks:

  - name: import EPEL and Remi GPG keys
    rpm_key: "key={{ item }} state=present"
    with_items:
    - "https://fedoraproject.org/static/06088895.txt"
    - "http://rpms.famillecollet.com/RPM-GPG-KEY-remi"
  - name: Insall EPEL and Remi repos
    command: "rpm -Uvh --force {{ item.href}} creates={{item.creates}}"
    with_items:
    - {
      href: "http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm",
      creates: "/etc/yum.repos.d/epel.repo"
    }
    - {
      href: "http://rpms.famillecollet.com/enterprise/remi-release-6.rpm",
      creates: "/etc/yum.repos.d/remi.repo"
    }
    - name: Disable firewall (since this is a dev environment)
      service: name=iptables state=stopped enabled=no
    - name: Install Node.js and npm
      yum: name=npm state=present enablerepo=epel
    - name: Install Forever (to run our Node.js app)
      npm: name=forever global=yes state=latest
### Now, add the following to your playbook, to copy the entire app to the server, and then have NPM
### download the required dependencies (in this case, express):
   - name: Ensure Node.js app folder exists.
     file: "path={{ node_apps_location }} state=directory"

   - name: Copy example Node.js app to server.
     copy: "src=app dest={{ node_apps_location }}"

   - name: Install app dependencies defined in package.json.
     npm: path={{ node_apps_location }}/app

### Launch a Node.js app
### We’ll now use forever (which we installed earlier) to start the app.

   - name: Check list of running Node.js apps.
     command: forever list
     register: forever_list
     changed_when: false
'''
register creates a new variable, forever_list, to be used in the next play to determine when
to run the play. register stashes the output (stdout, stderr) of the defined command in the
variable name passed to it.

changed_when tells Ansible explicitly when this play results in a change to the server. In this
case, we know the forever list command will never change the server, so we just say false—
the server will never be changed when the command is run

'''
   - name: Start example Node.js app.
     command: "forever start {{ node_apps_location }}/app/app.js"
     when: "forever_list.stdout.find('{{ node_apps_location }}/app/app.js') == -1"

'''
The second play actually starts the app, using Forever. We could also start the app by calling node
{{ node_apps_location }}/app/app.js, but we would not be able to control the process easily,
and we would also need to use nohup and & to avoid Ansible hanging on this play.
Forever tracks the Node apps it manages, and we use Forever’s list option to print a list of running
apps. The first time we run this playbook, the list will obviously be empty—but on future runs, if the
app is running, we don’t want to start another instance of it. To avoid that situation, we tell Ansible
when we want to start the app with when. Specifically, we tell Ansible to start the app only when
the app’s path in not in the forever list output
'''
  ### Deploy a Node.js app
  ### First, we’ll create a really simple Node.js
  ### app by creating a new folder, app, in the same folder as your playbook.yml. Create a new file, app.js,
  ### in this folder, with the following contents:
       // Load the express module.
       var express = require('express'),
       app = express.createServer();

       // Respond to requests for / with 'Hello World'.
       app.get('/', function(req, res){
       res.send('Hello World!');
       });

       // Listen on port 80 (like a true web server).
       app.listen(80);
       console.log('Express server started successfully.');

  ### Since this little app is dependent on Express (a simple http framework for Node), we also need to
  ### tell NPM about this dependency via a package.json file in the same folder as app.js
      {
       "name": "examplenodeapp",
       "description": "Example Express Node.js app.",
       "author": "Jeff Geerling <geerlingguy@mac.com>",
       "dependencies": {
       "express": "3.x.x"
       },
       "engine": "node >= 0.10.6"
      }
## once the playbook has finished configuring the server and deploying your app
## visithttp://hostname/ in a browser or use curl or wget to request the site

##  we’re going to set up a traditional LAMP (Linux, Apache, MySQL, and PHP)
##  server using Ubuntu 12.04 to run a Drupal website

## Include a variables file, and discover pre_tasks and handlers

## let’s begin the playbook by telling Ansible our variables are stored in a separate vars.yml file

## vars, pre_tasks, handlers, apache, MySQL, PHP and PHP ((5.5) apt repo),
## Disable firewall and start Apache, MySQL and PHP configure Apache
## enable Apache rewrite module and add Apache virtualhost for Drupal 8 development
## symlink to Drupal virtualhost to sites-enabled, remove default virtualhost file
## jinja template for virtualhost document root,
## 3 variables in vars.yml  drupal_core_version, drupal_core_path, and domain
## configure PHP with lineinfile Ansible’s lineinfile module does a simple task: ensures that a particular line of text exists (or
## doesn’t exist) in a file
## configure MySQL by remove the MySQL test database and create a db for drupal_core_path
## install composer and drush, install Drupal with Git and Drush
## The final two tasks set permissions on Drupal’s settings.php and files folder to 744 and 777,
## respectively
### Real-world playbook: Ubuntu LAMP server with Drupal
##  we’re going to set up a traditional LAMP (Linux, Apache, MySQL, and PHP)
##  server using Ubuntu 12.04 to run a Drupal website

## Include a variables file, and discover pre_tasks and handlers

## let’s begin the playbook by telling Ansible our variables are stored in a separate vars.yml file

---
- hosts: all

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Update apt cache if needed.
      apt: update_cache=yes cache_valid_time=3600

  handlers:
    - name: restart apache
      service: name=apache2 state=restarted

  tasks:
    - name: Get software for apt repository management.
      apt: "name={{ item }} state=present"
      with_items:
        - python-apt
        - python-pycurl

    - name: Add ondrej repository for later versions of PHP.
      apt_repository: repo='ppa:ondrej/php' update_cache=yes

    - name: "Install Apache, MySQL, PHP, and other dependencies."
      apt: "name={{ item }} state=present"
      with_items:
        - git
        - curl
        - unzip
        - sendmail
        - apache2
        - php7.1-common
        - php7.1-cli
        - php7.1-dev
        - php7.1-gd
        - php7.1-curl
        - php7.1-json
        - php7.1-opcache
        - php7.1-xml
        - php7.1-mbstring
        - php7.1-pdo
        - php7.1-mysql
        - php-apcu
        - libpcre3-dev
        - libapache2-mod-php7.1
        - python-mysqldb
        - mysql-server

    - name: Disable the firewall (since this is for local dev only).
      service: name=ufw state=stopped

    - name: "Start Apache, MySQL, and PHP."
      service: "name={{ item }} state=started enabled=yes"
      with_items:
        - apache2
        - mysql

    - name: Enable Apache rewrite module (required for Drupal).
      apache2_module: name=rewrite state=present
      notify: restart apache

    - name: Add Apache virtualhost for Drupal 8.
      template:
        src: "templates/drupal.test.conf.j2"
        dest: "/etc/apache2/sites-available/{{ domain }}.test.conf"
        owner: root
        group: root
        mode: 0644
      notify: restart apache

    - name: Symlink Drupal virtualhost to sites-enabled.
      file:
        src: "/etc/apache2/sites-available/{{ domain }}.test.conf"
        dest: "/etc/apache2/sites-enabled/{{ domain }}.test.conf"
        state: link
      notify: restart apache

    - name: Remove default virtualhost file.
      file:
        path: "/etc/apache2/sites-enabled/000-default.conf"
        state: absent
      notify: restart apache

    - name: Adjust OpCache memory setting.
      lineinfile:
        dest: "/etc/php/7.1/apache2/conf.d/10-opcache.ini"
        regexp: "^opcache.memory_consumption"
        line: "opcache.memory_consumption = 96"
        state: present
      notify: restart apache

    - name: Remove the MySQL test database.
      mysql_db: db=test state=absent

    - name: Create a MySQL database for Drupal.
      mysql_db: "db={{ domain }} state=present"

    - name: Create a MySQL user for Drupal.
      mysql_user:
        name: "{{ domain }}"
        password: "1234"
        priv: "{{ domain }}.*:ALL"
        host: localhost
        state: present

    - name: Download Composer installer.
      get_url:
        url: https://getcomposer.org/installer
        dest: /tmp/composer-installer.php
        mode: 0755

    - name: Run Composer installer.
      command: >
        php composer-installer.php
        chdir=/tmp
        creates=/usr/local/bin/composer

    - name: Move Composer into globally-accessible location.
      shell: >
        mv /tmp/composer.phar /usr/local/bin/composer
        creates=/usr/local/bin/composer

    - name: Check out drush 8.x branch.
      git:
        repo: https://github.com/drush-ops/drush.git
        version: 8.x
        dest: /opt/drush

    - name: Install Drush dependencies with Composer.
      shell: >
        /usr/local/bin/composer install
        chdir=/opt/drush
        creates=/opt/drush/vendor/autoload.php

    - name: Create drush bin symlink.
      file:
        src: /opt/drush/drush
        dest: /usr/local/bin/drush
        state: link

    - name: Check out Drupal Core to the Apache docroot.
      git:
        repo: http://git.drupal.org/project/drupal.git
        version: "{{ drupal_core_version }}"
        dest: "{{ drupal_core_path }}"

    - name: Install Drupal dependencies with Composer.
      shell: >
        /usr/local/bin/composer install
        chdir={{ drupal_core_path }}
        creates={{ drupal_core_path }}/vendor/autoload.php

    - name: Install Drupal.
      command: >
        drush si -y --site-name="{{ drupal_site_name }}"
        --account-name=admin
        --account-pass=admin
        --db-url=mysql://{{ domain }}:1234@localhost/{{ domain }}
        --root={{ drupal_core_path }}
        creates={{ drupal_core_path }}/sites/default/settings.php
      notify: restart apache

    # SEE: https://drupal.org/node/2121849#comment-8413637
    - name: Set permissions properly on settings.php.
      file:
        path: "{{ drupal_core_path }}/sites/default/settings.php"
        mode: 0744

    - name: Set permissions properly on files directory.
      file:
        path: "{{ drupal_core_path }}/sites/default/files"
        mode: 0777
        state: directory
        recurse: yes


## There are three variables we will need (drupal_core_version, drupal_core_path, and domain), so
## add them to the empty vars.yml file we created earlier:

 ---
 # The core version you want to use (e.g. 6.x, 7.x, 8.0.x).
 drupal_core_version: "8.0.x"

 # The path where Drupal will be downloaded and installed.
 drupal_core_path: "/var/www/drupal-{{ drupal_core_version }}-dev"

 # The resulting domain will be [domain].dev (with .dev appended).
 domain: "drupaltest"


## Jinja2 template (denoted by the extra .j2 on the end of the filename), drupal.dev.conf.j2:
 <VirtualHost *:80>
 ServerAdmin webmaster@localhost
 ServerName {{ domain }}.dev
 ServerAlias www.{{ domain }}.dev
 DocumentRoot {{ drupal_core_path }}
 <Directory "{{ drupal_core_path }}">
 Options FollowSymLinks Indexes
 AllowOverride All
 </Directory>
 </VirtualHost>
## This is a fairly standard Apache VirtualHost definition, but we have a few Jinja2 template variables
## mixed in. The syntax for printing a variable in a Jinja2 template is the same syntax we use in our
## Ansible playbooks—two brackets around the variable’s name (like so: {{ variable }})
## notify will wait until after we’ve finished all the other
## steps in our main group of tasks (giving us time to finish setting up the server), then restart Apache

## configure PHP with lineinfile
- name: Enable upload progress via APC.
  lineinfile:
    dest: "/etc/php5/apache2/conf.d/20-apcu.ini"
    regexp: "^apc.rfc1867"
    line: "apc.rfc1867 = 1"
    state: present
  notify: restart apache

## configure MySQL
- name: Remove the MySQL test database.
  mysql_db: db=test state=absent

- name: Create a database for Drupal.
  mysql_db: "db={{ domain }} state=present"

## install composer and drush

- name: Install Composer into the current directory.
  shell: >
    curl -sS https://getcomposer.org/installer | php
    creates=/usr/local/bin/composer

- name: Move Composer into globally-accessible location.
  shell: >
    mv composer.phar /usr/local/bin/composer
    creates=/usr/local/bin/composer

## shell allows you to pipe command output to other commands, access the local environment, etc.
## Now, we’ll install Drush using the latest version from GitHub

- name: Check out drush master branch.
  git:
    repo: https://github.com/drush-ops/drush.git
    dest: /opt/drush

- name: Install Drush dependencies with Composer.
  shell: >
    /usr/local/bin/composer install
    chdir=/opt/drush
    creates=/opt/drush/vendor/autoload.php

- name: Create drush bin symlink.
  file:
    src: /opt/drush/drush
    dest: /usr/local/bin/drush
    state: link

## install Drupal with Git and Drush
## we use git again to clone Drupal to the apache document root we defined earlier in our virtual host
## configuration, then we’ll run Drupal’s installation via drush, and fix a couple other file permissions
## issues so Drupal loads correctly within our VM.

- name: Check out Drupal Core to the Apache docroot.
  git:
    repo: http://git.drupal.org/project/drupal.git
    version: "{{ drupal_core_version }}"
    dest: "{{ drupal_core_path }}"

- name: Install Drupal.
  command: >
    drush si -y --site-name="{{ drupal_site_name }}" --account-name=admin
    --account-pass=admin --db-url=mysql://root@localhost/{{ domain }}
    chdir={{ drupal_core_path }}
    creates={{ drupal_core_path }}/sites/default/settings.php
  notify: restart apache

# SEE: https://drupal.org/node/2121849#comment-8413637
- name: Set permissions properly on settings.php.
  file:
    path: "{{ drupal_core_path }}/sites/default/settings.php"
    mode: 0744

- name: Set permissions on files directory.
  file:
    path: "{{ drupal_core_path }}/sites/default/files"
    mode: 0777
    state: directory
    recurse: yes



### apache tomcat server with Apache solr
## Apache Solr is a fast and scalable search server optimized for full-text search, word highlighting,
## faceted search, fast indexing, and more. It’s a very popular search server, and it’s pretty easy to
## install and configure using Ansible
## include a variable file and discover pre_tasks and handlers
### installing Apache Solr Apache Tomcat on Ubuntu

---
- hosts: all

  vars_files:
    - vars.yml

  pre_tasks:
    - name: Update apt cache if needed.
      apt: update_cache=yes cache_valid_time=3600

  handlers:
    - name: restart solr
      service: name=solr state=restarted

  tasks:
    - name: Install Java.
      apt: name=openjdk-8-jdk state=present

    - name: Download Solr.
      get_url:
        url: "https://archive.apache.org/dist/lucene/solr/{{ solr_version }}/solr-{{ solr_version }}.tgz"
        dest: "{{ download_dir }}/solr-{{ solr_version }}.tgz"
        checksum: "{{ solr_checksum }}"

    - name: Expand Solr.
      unarchive:
        src: "{{ download_dir }}/solr-{{ solr_version }}.tgz"
        dest: "{{ download_dir }}"
        copy: no
        creates: "{{ download_dir }}/solr-{{ solr_version }}/README.txt"

    - name: Run Solr installation script.
      shell: >
        {{ download_dir }}/solr-{{ solr_version }}/bin/install_solr_service.sh
        {{ download_dir }}/solr-{{ solr_version }}.tgz
        -i /opt
        -d /var/solr
        -u solr
        -s solr
        -p 8983
        creates={{ solr_dir }}/bin/solr

    - name: Ensure solr is started and enabled on boot.
      service: name=solr state=started enabled=yes


### vars.yml
---
# The directory into which Solr will be downloaded for setup.
download_dir: /tmp

# The directory inside which Solr will be installed.
solr_dir: /opt/solr

# Solr version and download information.
solr_version: 6.5.1
solr_checksum: sha1:2cc43b837743949a46bd7efbab14b43f6d92b4b8


---
- hosts: all

  vars_files:
  - vars.yml

## we also need to make sure the apt cache is up to date,
## using pre_tasks
pre_tasks:
  - name: Update apt cache if needed.
    apt: update_cache=yes cache_valid_time=3600
## we just need a handler to restart tomcat7, the Java servlet container
## that powers Apache Solr
## We can call this handler with the option notify: restart tomcat in any play in our playbook
handlers:
- name: restart tomcat
  service: name=tomcat7 state=restarted

## install Apache Tomcat 7 We used the apt module to install two packages, tomcat7 and tomcat7-admin
## (so we can log into Tomcat’s administrative backend), then started tomcat7 and set it to start when
## the system boots.

tasks:
- name: Install Tomcat 7.
  apt: "name={{ item }} state=installed"
  with_items:
    - tomcat7
    - tomcat7-admin

- name: Ensure Tomcat 7 is started and enabled on boot.
  service: name=tomcat7 state=started enabled=yes

## install Apache Solr
## the get_url module provides more flexibility and convenience than raw wget or curl
## commands.
## You have to pass get_url a url (the source of the file to be downloaded), and a dest (the location
## where the file will be downloaded). If you pass a directory to the dest parameter, Ansible will
## place the file inside, but will always re-download the file on subsequent runs of the playbook (and
## overwrite the existing download if it has changed). To avoid this extra overhead, we give the full
## path to the downloaded file
- name: Download Solr.
  get_url:
    url: http://apache.osuosl.org/lucene/solr/4.9.1/solr-4.9.1.tgz
    dest: "{{ download_dir }}/solr-4.9.1.tgz"
    sha256sum: 4a546369a31d34b15bc4b99188984716bf4c0c158c0e337f3c1f98088aec70ee
## We need to expand the Apache Solr archive, then copy it into place. For both of these steps, use
## the built-in tar and cp utilities (with the appropriate options) to do the work. Setting creates tells
## Ansible to skip these steps in subsequent runs, since the Solr war file will already be in place


- name: Expand Solr.
  command: >
    tar -C /tmp -xvzf {{ download_dir }}/solr-4.9.1.tgz
    creates={{ download_dir }}/solr-4.9.1/dist/solr-4.9.1.war

- name: Copy Solr into place.
  command: >
    cp -r {{ download_dir }}/solr-4.9.1 {{ solr_dir }}
    creates={{ solr_dir }}/dist/solr-4.9.1.war
# Use shell so commands are passed in correctly.
- name: Copy Solr components into place.
  shell: >
    cp -r {{ item.src }} {{ item.dest }}
    creates={{ item.creates }}
  with_items:
# Solr example configuration and war file.
    - {
      src: "{{ solr_dir }}/example/webapps/solr.war",
      dest: "{{ solr_dir }}/solr.war",
      creates: "{{ solr_dir }}/solr.war"
      }
    - {
      src: "{{ solr_dir }}/example/solr/*",
      dest: "{{ solr_dir }}/",
      creates: "{{ solr_dir }}/solr.xml"
      }
# Solr log4j logging configuration.
    - {
      src: "{{ solr_dir }}/example/lib/ext/*",
      dest: "/var/lib/tomcat7/shared/",
      creates: "/var/lib/tomcat7/shared/log4j-1.2.16.jar"
      }
      - {
      src: "{{ solr_dir }}/example/resources/log4j.properties",
      dest: "/var/lib/tomcat7/shared/classes",
      creates: "/var/lib/tomcat7/shared/classes/log4j.properties"
      }
      notify: restart tomcat

- name: Ensure solr example directory is absent.
  file:
    path: "{{ solr_dir }}/example"
    state: absent

- name: Set up solr data directory.
  file:
    path: "{{ solr_dir }}/data"
    state: directory
    owner: tomcat7
    group: tomcat7
- name: Configure solrconfig.xml for new data directory.
  lineinfile:
    dest: "{{ solr_dir }}/collection1/conf/solrconfig.xml"
    regexp: "^.*<dataDir.+$"
    line: "<dataDir>${solr.data.dir:{{ solr_dir }}/data}</dataDir>"
  state: present
- name: Set permissions for solr home.
  file:
    path: "{{ solr_dir }}"
    recurse: yes
    owner: tomcat7
    group: tomcat7
- name: Add Catalina configuration for solr.
  template:
    src: templates/solr.xml.j2
    dest: /etc/tomcat7/Catalina/localhost/solr.xml
    owner: root
    group: tomcat7
    mode: 0644
  notify: restart tomcat
## Before the task runs, the local template file will need to be created. Create a ‘templates’ folder in
## the same directory as your Apache Solr playbook, and create a new file named solr.xml.j2 inside,
## with the following contents:
 <?xml version="1.0" encoding="utf-8"?>
 <Context docBase="{{ solr_dir }}/solr.war" debug="0" crossContext="true">
 <Environment name="solr/home" type="java.lang.String" \
 value="{{ solr_dir }}" override="true"/>
 </Context>
## Run the playbook with $ ansible-playbook [playbook-name.yml], and after a few minutes
## (depending on your server’s Internet connection speed), you should be able to access the Solr admin
## interface at http://example.com:8080/solr (where ‘example.com’ is your server’s hostname or IP
## address)

## vars.yml . Create the file in the same folder
## as your Solr playbook, and add the following contents
download_dir: /tmp
solr_dir: /opt/solr
